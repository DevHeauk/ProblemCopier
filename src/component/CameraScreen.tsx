import {CameraRoll} from '@react-native-camera-roll/camera-roll';
import React, {useEffect, useRef, useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Platform,
  PermissionsAndroid,
  ActivityIndicator,
  Modal,
} from 'react-native';
import {Camera, useCameraDevices, PhotoFile} from 'react-native-vision-camera';
import { config } from '../../config';
import ResultScreen from './ResultScreen';

const CameraScreen: React.FC = () => {
  const devices = useCameraDevices();
  const device = devices.find(d => d.position === 'back');

  const camera = useRef<Camera>(null);
  const [hasPermission, setHasPermission] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [htmlContent, setHtmlContent] = useState<string | null>(null);
  const [showResult, setShowResult] = useState<boolean>(false);

  useEffect(() => {
    (async () => {
      const cameraPermission = await Camera.requestCameraPermission();
      setHasPermission(cameraPermission === 'granted');
    })();
  }, []);

  if (!device) return <Text>No camera available</Text>;
  if (!hasPermission) return <Text>No permission</Text>;

  const savePhotoToGallery = async (path: string) => {
    try {
      if (Platform.OS === 'android') {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
        );
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
          Alert.alert('Í∂åÌïú Í±∞Î∂ÄÎê®', 'ÏÇ¨ÏßÑÏùÑ Ï†ÄÏû•ÌïòÎ†§Î©¥ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
          return;
        }
      }

      const uri = 'file://' + path;
      await CameraRoll.saveAsset(uri);

      Alert.alert('‚úÖ Ï†ÄÏû• ÏôÑÎ£å', 'ÏÇ¨ÏßÑÏù¥ Í∞§Îü¨Î¶¨Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      console.error('‚ùå Ï†ÄÏû• Ïã§Ìå®:', error);
      Alert.alert('Ï†ÄÏû• Ïã§Ìå®', 'ÏÇ¨ÏßÑ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const sendImageToAPI = async (photoPath: string) => {
    try {
      const formData = new FormData();
      formData.append('image', {
        uri: Platform.OS === 'ios' ? photoPath : 'file://' + photoPath,
        type: 'image/jpeg',
        name: 'photo.jpg'
      } as any);

      const response = await fetch(`${config.API_URL}/api/math/analyze-image`, {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const result = await response.json();
      console.log('API ÏùëÎãµ:', result);

      if (result.data?.htmlContent) {
        setHtmlContent(result.data.htmlContent);
        setShowResult(true);
      } else {
        Alert.alert(
          'Î∂ÑÏÑù ÏôÑÎ£å',
          `ÏõêÎ≥∏ Î¨∏Ï†ú: ${result.data?.originalProblem || 'N/A'}\n\nÏú†ÏÇ¨ Î¨∏Ï†ú ${result.data?.similarProblems?.length || 0}Í∞ú ÏÉùÏÑ±Îê®`
        );
      }

      return result;
    } catch (error) {
      console.error('API Ìò∏Ï∂ú Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', 'API ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
      throw error;
    }
  };

  const takePhoto = async () => {
    try {
      if (camera.current) {
        setIsLoading(true);
        const photo: PhotoFile = await camera.current.takePhoto();
        if (photo?.path) {
          console.log('üì∏ Ï∞çÏùÄ ÏÇ¨ÏßÑ Í≤ΩÎ°ú:', photo.path);

          // API ÏÑúÎ≤ÑÎ°ú Ïù¥ÎØ∏ÏßÄ Ï†ÑÏÜ°
          await sendImageToAPI(photo.path);

          // Í∞§Îü¨Î¶¨ÏóêÎèÑ Ï†ÄÏû•
          // await savePhotoToGallery(photo.path);
        }
      }
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCloseResult = () => {
    setShowResult(false);
    setHtmlContent(null);
  };

  return (
    <View style={styles.container}>
      {showResult && htmlContent ? (
        <ResultScreen
          htmlContent={htmlContent}
          onClose={handleCloseResult}
        />
      ) : (
        <>
          <Camera
            ref={camera}
            style={styles.camera}
            device={device}
            isActive={true}
            photo={true}
            onError={error => {
              console.error('‚ùå Camera Error:', error);
            }}
          />
          <TouchableOpacity
            onPress={takePhoto}
            style={[styles.button, isLoading && styles.buttonDisabled]}
            disabled={isLoading}
          >
            {isLoading ? (
              <ActivityIndicator color="black" />
            ) : (
              <Text style={styles.buttonText}>üì∏ Ï∞çÍ∏∞</Text>
            )}
          </TouchableOpacity>
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {flex: 1},
  camera: {...StyleSheet.absoluteFillObject},
  button: {
    position: 'absolute',
    bottom: 50,
    alignSelf: 'center',
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 50,
    minWidth: 100,
    alignItems: 'center',
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {fontSize: 18, fontWeight: 'bold'},
});

export default CameraScreen;
